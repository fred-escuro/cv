generator client {
  provider                    = "prisma-client-py"
  recursive_type_depth        = "-1"
  enable_experimental_decimal = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CvFile {
  id                   Int                   @id @default(autoincrement())
  fileId               String                @unique @map("file_id") @db.Uuid
  originalFilename     String                @map("original_filename") @db.VarChar(255)
  fileType             String                @map("file_type") @db.VarChar(10)
  fileSize             BigInt                @map("file_size")
  fileHash             String                @unique @map("file_hash") @db.VarChar(64)
  convertedPdfFilename String?               @map("converted_pdf_filename") @db.VarChar(255)
  extractedTextData    String?               @map("extracted_text_data")
  aiGeneratedJson      Json?                 @map("ai_generated_json")
  dateCreated          DateTime              @default(now()) @map("date_created") @db.Timestamptz(6)
  processingStatus     String                @default("pending") @map("processing_status") @db.VarChar(50)
  currentStep          String?               @map("current_step") @db.VarChar(100)
  progressPercent      Int                   @default(0) @map("progress_percent")
  errorMessage         String?               @map("error_message")
  updatedAt            DateTime              @default(now()) @map("updated_at") @db.Timestamptz(6)
  awardsHonors         AwardHonor[]
  certifications       Certification[]
  education            Education[]
  itSystems            ItSystem[]
  personalInfo         PersonalInfo?
  projects             Project[]
  references           Reference[]
  skills               Skill[]
  textLines            CvTextLine[]
  volunteerExperience  VolunteerExperience[]
  workExperience       WorkExperience[]

  @@map("cv_files")
}

model PersonalInfo {
  id                 Int         @id @default(autoincrement())
  fileId             String      @unique @map("file_id") @db.Uuid
  firstName          String?     @map("first_name") @db.VarChar(100)
  middleName         String?     @map("middle_name") @db.VarChar(100)
  lastName           String?     @map("last_name") @db.VarChar(100)
  birthDate          DateTime?   @map("birth_date") @db.Date
  gender             String?     @db.VarChar(20)
  civilStatus        String?     @map("civil_status") @db.VarChar(50)
  street             String?     @map("street") @db.VarChar(255)
  barangay           String?     @map("barangay") @db.VarChar(100)
  city               String?     @map("city") @db.VarChar(100)
  state              String?     @map("state") @db.VarChar(100)
  postalCode         String?     @map("postal_code") @db.VarChar(20)
  country            String?     @map("country") @db.VarChar(100)
  desiredCity        String?     @map("desired_city") @db.VarChar(100)
  desiredState       String?     @map("desired_state") @db.VarChar(100)
  desiredCountry     String?     @map("desired_country") @db.VarChar(100)
  openToWorkFromHome Boolean?    @map("open_to_work_from_home")
  openToWorkOnsite   Boolean?    @map("open_to_work_onsite")
  createdAt          DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  emails             Email[]
  cvFile             CvFile      @relation(fields: [fileId], references: [fileId], onDelete: Cascade)
  phones             Phone[]
  socialUrls         SocialUrl[]

  @@map("cv_personal_info")
}

model WorkExperience {
  id               Int       @id @default(autoincrement())
  fileId           String    @map("file_id") @db.Uuid
  jobTitle         String    @map("job_title") @db.VarChar(255)
  companyName      String?   @map("company_name") @db.VarChar(255)
  location         String?   @db.VarChar(255)
  startDate        DateTime? @map("start_date") @db.Date
  endDate          DateTime? @map("end_date") @db.Date
  isCurrent        Boolean   @default(false) @map("is_current")
  responsibilities String[]
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  cvFile           CvFile    @relation(fields: [fileId], references: [fileId], onDelete: Cascade)

  @@map("cv_work_experience")
}

model Education {
  id          Int       @id @default(autoincrement())
  fileId      String    @map("file_id") @db.Uuid
  degree      String    @db.VarChar(255)
  institution String?   @db.VarChar(255)
  location    String?   @db.VarChar(255)
  startDate   DateTime? @map("start_date") @db.Date
  endDate     DateTime? @map("end_date") @db.Date
  gpa         Decimal?  @db.Decimal(3, 2)
  honors      String?   @db.VarChar(255)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  cvFile      CvFile    @relation(fields: [fileId], references: [fileId], onDelete: Cascade)

  @@map("cv_education")
}

model Skill {
  id          Int      @id @default(autoincrement())
  fileId      String   @map("file_id") @db.Uuid
  skillName   String   @map("skill_name") @db.VarChar(255)
  skillType   String   @map("skill_type") @db.VarChar(50)
  proficiency String?  @db.VarChar(50)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  cvFile      CvFile   @relation(fields: [fileId], references: [fileId], onDelete: Cascade)

  @@map("cv_skills")
}

model Certification {
  id                  Int       @id @default(autoincrement())
  fileId              String    @map("file_id") @db.Uuid
  name                String    @db.VarChar(255)
  issuingOrganization String?   @map("issuing_organization") @db.VarChar(255)
  issueDate           DateTime? @map("issue_date") @db.Date
  expirationDate      DateTime? @map("expiration_date") @db.Date
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  cvFile              CvFile    @relation(fields: [fileId], references: [fileId], onDelete: Cascade)

  @@map("cv_certifications")
}

model Project {
  id           Int       @id @default(autoincrement())
  fileId       String    @map("file_id") @db.Uuid
  title        String    @db.VarChar(255)
  description  String?
  startDate    DateTime? @map("start_date") @db.Date
  endDate      DateTime? @map("end_date") @db.Date
  projectUrl   String?   @map("project_url") @db.VarChar(500)
  technologies String[]
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  cvFile       CvFile    @relation(fields: [fileId], references: [fileId], onDelete: Cascade)

  @@map("cv_projects")
}

model AwardHonor {
  id                  Int       @id @default(autoincrement())
  fileId              String    @map("file_id") @db.Uuid
  title               String    @db.VarChar(255)
  issuingOrganization String?   @map("issuing_organization") @db.VarChar(255)
  dateReceived        DateTime? @map("date_received") @db.Date
  description         String?
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  cvFile              CvFile    @relation(fields: [fileId], references: [fileId], onDelete: Cascade)

  @@map("cv_awards_honors")
}

model VolunteerExperience {
  id           Int       @id @default(autoincrement())
  fileId       String    @map("file_id") @db.Uuid
  role         String    @db.VarChar(255)
  organization String?   @db.VarChar(255)
  location     String?   @db.VarChar(255)
  startDate    DateTime? @map("start_date") @db.Date
  endDate      DateTime? @map("end_date") @db.Date
  description  String?
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  cvFile       CvFile    @relation(fields: [fileId], references: [fileId], onDelete: Cascade)

  @@map("cv_volunteer_experience")
}

model Reference {
  id           Int      @id @default(autoincrement())
  fileId       String   @map("file_id") @db.Uuid
  name         String   @db.VarChar(255)
  relationship String?  @db.VarChar(255)
  email        String?  @db.VarChar(255)
  phone        String?  @db.VarChar(50)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  cvFile       CvFile   @relation(fields: [fileId], references: [fileId], onDelete: Cascade)

  @@map("cv_references")
}

model ItSystem {
  id           Int      @id @default(autoincrement())
  fileId       String   @map("file_id") @db.Uuid
  systemName   String   @map("system_name") @db.VarChar(255)
  abbreviation String?  @db.VarChar(50)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  cvFile       CvFile   @relation(fields: [fileId], references: [fileId], onDelete: Cascade)

  @@map("cv_it_systems")
}

model Email {
  id           Int          @id @default(autoincrement())
  fileId       String       @map("file_id") @db.Uuid
  email        String       @db.VarChar(255)
  emailType    String?      @map("email_type") @db.VarChar(50)
  isPrimary    Boolean      @default(false) @map("is_primary")
  createdAt    DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  personalInfo PersonalInfo @relation(fields: [fileId], references: [fileId], onDelete: Cascade)

  @@map("cv_emails")
}

model Phone {
  id           Int          @id @default(autoincrement())
  fileId       String       @map("file_id") @db.Uuid
  phone        String       @db.VarChar(50)
  phoneType    String?      @map("phone_type") @db.VarChar(20)
  isPrimary    Boolean      @default(false) @map("is_primary")
  createdAt    DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  personalInfo PersonalInfo @relation(fields: [fileId], references: [fileId], onDelete: Cascade)

  @@map("cv_phones")
}

model SocialUrl {
  id           Int          @id @default(autoincrement())
  fileId       String       @map("file_id") @db.Uuid
  url          String       @map("url") @db.VarChar(500)
  platform     String?      @map("platform") @db.VarChar(100)
  createdAt    DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  personalInfo PersonalInfo @relation(fields: [fileId], references: [fileId], onDelete: Cascade)

  @@map("cv_social_urls")
}

model SystemGenericSetting {
  id         Int      @id @default(autoincrement())
  category   String   @db.VarChar(100)
  settingKey String   @map("setting_key") @db.VarChar(100)
  label      String   @db.VarChar(255)
  value      String?  @db.VarChar(255)
  sortOrder  Int      @default(0) @map("sort_order")
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@unique([category, settingKey])
  @@map("system_generic_settings")
}

model CvTextLine {
  id         Int      @id @default(autoincrement())
  fileId     String   @map("file_id") @db.Uuid
  lineNumber Int      @map("line_number")
  lineText   String   @map("line_text")
  lineType   String?  @map("line_type") @db.VarChar(50)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  cvFile     CvFile   @relation(fields: [fileId], references: [fileId], onDelete: Cascade)

  @@unique([fileId, lineNumber])
  @@map("cv_text_lines")
}
