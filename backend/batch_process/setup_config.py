#!/usr/bin/env python3
"""
Setup Configuration Script for Batch CV Processor

This script helps users set up the configuration for the batch processor
by creating a .env file with their preferred settings.
"""

import os
import sys
from pathlib import Path

def create_env_file():
    """Create a .env file with user input"""
    
    print("üöÄ Batch CV Processor Configuration Setup")
    print("=" * 50)
    print("This script will help you create a .env configuration file.")
    print("Press Enter to use default values, or type your preferred settings.")
    print()
    
    # Get user preferences
    config = {}
    
    # CV Folder
    default_folder = input(f"üìÅ CV folder to process (default: C:/CVs): ").strip()
    config['DEFAULT_CV_FOLDER'] = default_folder if default_folder else 'C:/CVs'
    
    # File Limit
    default_limit = input(f"üìä Maximum files to process (default: 0 = no limit): ").strip()
    config['DEFAULT_FILE_LIMIT'] = default_limit if default_limit else '0'
    
    # File Types
    print("\nüìÑ File types to process:")
    print("   Available: pdf, docx, doc, rtf, txt, json, jpg, jpeg, png, bmp, tiff")
    print("   Leave empty to process all supported types")
    file_types = input(f"   File types (comma-separated, default: all): ").strip()
    config['DEFAULT_FILE_TYPES'] = file_types if file_types else 'pdf,docx,doc,rtf,txt,json,jpg,jpeg,png,bmp,tiff'
    
    # File Size Limits
    max_size = input(f"üìè Maximum file size in MB (default: 100): ").strip()
    config['MAX_FILE_SIZE_MB'] = max_size if max_size else '100'
    
    min_size = input(f"üìè Minimum file size in KB (default: 1): ").strip()
    config['MIN_FILE_SIZE_KB'] = min_size if min_size else '1'
    
    # Processing Settings
    delay = input(f"‚è±Ô∏è  Delay between files in seconds (default: 0.5): ").strip()
    config['PROCESSING_DELAY_SECONDS'] = delay if delay else '0.5'
    
    batch_size = input(f"üì¶ Batch size for processing (default: 50): ").strip()
    config['BATCH_SIZE'] = batch_size if batch_size else '50'
    
    # Logging
    log_file = input(f"üìù Log file name (default: batch_processing_log): ").strip()
    config['DEFAULT_LOG_FILE'] = log_file if log_file else 'batch_processing_log'
    
    error_log = input(f"‚ùå Error log file name (default: batch_error_log): ").strip()
    config['DEFAULT_ERROR_LOG_FILE'] = error_log if error_log else 'batch_error_log'
    
    log_dir = input(f"üìÅ Log directory (default: logs): ").strip()
    config['LOG_DIRECTORY'] = log_dir if log_dir else 'logs'
    
    # Error Handling
    skip_corrupted = input(f"‚ö†Ô∏è  Skip corrupted files? (y/n, default: y): ").strip().lower()
    config['SKIP_CORRUPTED_FILES'] = 'true' if skip_corrupted in ['', 'y', 'yes'] else 'false'
    
    continue_on_error = input(f"üîÑ Continue processing on errors? (y/n, default: y): ").strip().lower()
    config['CONTINUE_ON_ERROR'] = 'true' if continue_on_error in ['', 'y', 'yes'] else 'false'
    
    max_errors = input(f"üõë Max errors before stopping (default: 100): ").strip()
    config['MAX_ERRORS_BEFORE_STOP'] = max_errors if max_errors else '100'
    
    # Performance
    progress_bar = input(f"üìä Enable progress bar? (y/n, default: y): ").strip().lower()
    config['ENABLE_PROGRESS_BAR'] = 'true' if progress_bar in ['', 'y', 'yes'] else 'false'
    
    parallel = input(f"‚ö° Enable parallel processing? (y/n, default: n): ").strip().lower()
    config['ENABLE_PARALLEL_PROCESSING'] = 'true' if parallel in ['y', 'yes'] else 'false'
    
    if config['ENABLE_PARALLEL_PROCESSING'] == 'true':
        workers = input(f"üë• Number of parallel workers (default: 4): ").strip()
        config['PARALLEL_WORKERS'] = workers if workers else '4'
    
    # Advanced Settings
    dry_run = input(f"üîç Enable dry run mode? (y/n, default: n): ").strip().lower()
    config['ENABLE_DRY_RUN'] = 'true' if dry_run in ['y', 'yes'] else 'false'
    
    # Create the .env file
    env_content = """# Batch CV Processor Configuration
# Generated by setup_config.py

# =============================================================================
# FOLDER CONFIGURATION
# =============================================================================

# Default folder to process CVs from
DEFAULT_CV_FOLDER={}

# =============================================================================
# PROCESSING LIMITS
# =============================================================================

# Maximum number of files to process (0 = no limit)
DEFAULT_FILE_LIMIT={}

# Maximum file size in MB (0 = no limit)
MAX_FILE_SIZE_MB={}

# Minimum file size in KB (0 = no limit)
MIN_FILE_SIZE_KB={}

# =============================================================================
# FILE TYPE FILTERS
# =============================================================================

# Comma-separated list of file extensions to process
DEFAULT_FILE_TYPES={}

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================

# Default log file name (without extension)
DEFAULT_LOG_FILE={}

# Default error log file name (without extension)
DEFAULT_ERROR_LOG_FILE={}

# Log directory (relative to batch_process folder)
LOG_DIRECTORY={}

# =============================================================================
# PROCESSING SETTINGS
# =============================================================================

# Delay between files in seconds
PROCESSING_DELAY_SECONDS={}

# Batch size for processing
BATCH_SIZE={}

# =============================================================================
# ERROR HANDLING
# =============================================================================

# Skip corrupted files (true/false)
SKIP_CORRUPTED_FILES={}

# Continue processing on errors (true/false)
CONTINUE_ON_ERROR={}

# Maximum errors before stopping (0 = no limit)
MAX_ERRORS_BEFORE_STOP={}

# =============================================================================
# PERFORMANCE SETTINGS
# =============================================================================

# Enable progress bar (true/false)
ENABLE_PROGRESS_BAR={}

# Enable parallel processing (true/false)
ENABLE_PARALLEL_PROCESSING={}

# Number of parallel workers
PARALLEL_WORKERS={}

# =============================================================================
# ADVANCED SETTINGS
# =============================================================================

# Enable dry run mode (true/false)
ENABLE_DRY_RUN={}

# =============================================================================
# ADDITIONAL SETTINGS (using defaults)
# =============================================================================

# Log level (DEBUG, INFO, WARNING, ERROR)
LOG_LEVEL=INFO

# Database connection timeout in seconds
DATABASE_TIMEOUT_SECONDS=30

# Maximum retry attempts for failed operations
MAX_RETRIES=3

# Generate summary report (true/false)
GENERATE_SUMMARY_REPORT=true

# Save error log (true/false)
SAVE_ERROR_LOG=true

# Save success log (true/false)
SAVE_SUCCESS_LOG=false

# Create backup copies (true/false)
CREATE_BACKUP_COPIES=false

# Backup directory (relative to batch_process folder)
BACKUP_DIRECTORY=backups

# Cleanup temporary files (true/false)
CLEANUP_TEMP_FILES=true

# Cleanup failed files (true/false)
CLEANUP_FAILED_FILES=false

# Enable email notifications (true/false)
ENABLE_EMAIL_NOTIFICATIONS=false

# Notification email address
NOTIFICATION_EMAIL=

# Enable webhook notifications (true/false)
ENABLE_WEBHOOK_NOTIFICATIONS=false

# Webhook URL
WEBHOOK_URL=

# Enable resume processing (true/false)
ENABLE_RESUME_PROCESSING=true

# Resume checkpoint file name
RESUME_CHECKPOINT_FILE=batch_processing_checkpoint.json
""".format(
        config['DEFAULT_CV_FOLDER'],
        config['DEFAULT_FILE_LIMIT'],
        config['MAX_FILE_SIZE_MB'],
        config['MIN_FILE_SIZE_KB'],
        config['DEFAULT_FILE_TYPES'],
        config['DEFAULT_LOG_FILE'],
        config['DEFAULT_ERROR_LOG_FILE'],
        config['LOG_DIRECTORY'],
        config['PROCESSING_DELAY_SECONDS'],
        config['BATCH_SIZE'],
        config['SKIP_CORRUPTED_FILES'],
        config['CONTINUE_ON_ERROR'],
        config['MAX_ERRORS_BEFORE_STOP'],
        config['ENABLE_PROGRESS_BAR'],
        config['ENABLE_PARALLEL_PROCESSING'],
        config.get('PARALLEL_WORKERS', '4'),
        config['ENABLE_DRY_RUN']
    )
    
    # Write the .env file
    env_file = Path('.env')
    try:
        with open(env_file, 'w') as f:
            f.write(env_content)
        
        print(f"\n‚úÖ Configuration file created: {env_file.absolute()}")
        print("\nüìã Configuration Summary:")
        print(f"   üìÅ CV Folder: {config['DEFAULT_CV_FOLDER']}")
        print(f"   üìä File Limit: {config['DEFAULT_FILE_LIMIT']}")
        print(f"   üìÑ File Types: {config['DEFAULT_FILE_TYPES']}")
        print(f"   üìè Max Size: {config['MAX_FILE_SIZE_MB']} MB")
        print(f"   üìè Min Size: {config['MIN_FILE_SIZE_KB']} KB")
        print(f"   ‚è±Ô∏è  Delay: {config['PROCESSING_DELAY_SECONDS']} seconds")
        print(f"   üìù Log File: {config['DEFAULT_LOG_FILE']}")
        print(f"   ‚ùå Error Log: {config['DEFAULT_ERROR_LOG_FILE']}")
        print(f"   üìÅ Log Directory: {config['LOG_DIRECTORY']}")
        print(f"   ‚ö° Parallel: {config['ENABLE_PARALLEL_PROCESSING']}")
        print(f"   üîç Dry Run: {config['ENABLE_DRY_RUN']}")
        
        print("\nüöÄ You can now run the batch processor:")
        print("   python batch_cv_processor.py                    # Uses .env configuration")
        print("   python batch_cv_processor.py --show-config     # Show current settings")
        print("   python batch_cv_processor.py \"C:/OtherCVs\"    # Override folder")
        
    except Exception as e:
        print(f"‚ùå Error creating .env file: {e}")
        return False
    
    return True

def main():
    """Main function"""
    print("üîß Batch CV Processor Configuration Setup")
    print("=" * 50)
    
    # Check if .env already exists
    if Path('.env').exists():
        overwrite = input("‚ö†Ô∏è  .env file already exists. Overwrite? (y/n): ").strip().lower()
        if overwrite not in ['y', 'yes']:
            print("‚ùå Setup cancelled.")
            return
    
    # Create configuration
    if create_env_file():
        print("\nüéâ Configuration setup completed successfully!")
    else:
        print("\n‚ùå Configuration setup failed.")

if __name__ == "__main__":
    main()
